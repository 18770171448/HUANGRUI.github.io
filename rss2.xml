<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>realhuang</title>
    <link>http://hznu.asia/</link>
    
    <atom:link href="http://hznu.asia/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>国家地板级演员 GitHub顶级粉丝</description>
    <pubDate>Fri, 14 Jan 2022 09:22:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Effective Java--创建和销毁对象</title>
      <link>http://hznu.asia/2022/01/13/Effective-Java-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/</link>
      <guid>http://hznu.asia/2022/01/13/Effective-Java-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/</guid>
      <pubDate>Thu, 13 Jan 2022 07:28:10 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;第一条：用静态工厂方法代替构造器&quot;&gt;&lt;a href=&quot;#第一条：用静态工厂方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;第一条：用静态工厂方法代替构造器&quot;&gt;&lt;/a&gt;第一条：用静态工厂方法代替构造器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;静</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="第一条：用静态工厂方法代替构造器"><a href="#第一条：用静态工厂方法代替构造器" class="headerlink" title="第一条：用静态工厂方法代替构造器"></a>第一条：用静态工厂方法代替构造器</h2><blockquote><p>静态工厂方法和构造器方法各有优势，在选择时应根据实际需求选择，而不是盲目采用构造器或者盲目采用静态工厂方法。</p></blockquote><h3 id="静态工厂方法相比于构造器，优势在于有名称"><a href="#静态工厂方法相比于构造器，优势在于有名称" class="headerlink" title="静态工厂方法相比于构造器，优势在于有名称"></a>静态工厂方法相比于构造器，优势在于有名称</h3><p>这个相对来说比较好理解。假如 <strong>BigInteger（int, int, Random）</strong> 返回素数，这时候它的返回类型只能定义为Int类型，调用者如果使用构造器，代码一般如下：</p><p><code>Int getNumber = new BigInteger(3, 9, ...)</code>  </p><p>这样再创建对象的时候，无法判断返回的是一个什么数。，但是使用静态工厂方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Int <span class="title">probablePrime</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">/.../</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则可以通过根据调用 <strong>BigInteger.probablePrime</strong> 来判断出这是一个素数。</p><h3 id="静态工厂方法相比于构造器，不必每次调用时都创建一个新对象"><a href="#静态工厂方法相比于构造器，不必每次调用时都创建一个新对象" class="headerlink" title="静态工厂方法相比于构造器，不必每次调用时都创建一个新对象"></a>静态工厂方法相比于构造器，不必每次调用时都创建一个新对象</h3><p>这种方法类似于设计模式中的享元模式。比如下方代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用 <strong>valueOf</strong> 方法时，每次不必返回新的对象，都是返回已有对象的地址引用。</p><h3 id="静态工厂方法相比于构造器，可以返回原返回类型的任何子类型对象"><a href="#静态工厂方法相比于构造器，可以返回原返回类型的任何子类型对象" class="headerlink" title="静态工厂方法相比于构造器，可以返回原返回类型的任何子类型对象"></a>静态工厂方法相比于构造器，可以返回原返回类型的任何子类型对象</h3><p>这个在理解是可能会出现一些偏差。先看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> People <span class="title">createChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Children childer = <span class="keyword">new</span> Children();</span><br><span class="line">        <span class="keyword">return</span> childer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//People的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Children</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果使用构造器来创建对象，那么代码就是<code>People people = new People();</code>,这样返回的类型就只是 <strong>People</strong>类了，但是我们使用静态工厂方法的话，如上面代码所示，在静态工厂方法中可以直接返回Children的实例。</p><p>注：当时我的疑惑点主要在于<strong>People类</strong>中的<strong>createChildren()方法</strong>，当时认为<strong>不使用static</strong>也可以返回<strong>Children的实例</strong>。后面想明白，这使用静态工厂来创建对象，如果不使用static，那么该类的实例化会在<strong>createChildren()方法</strong>之前，那么就无法使用该方法来创建对象了。</p><h3 id="静态工厂方法相比于构造器，所返回对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值"><a href="#静态工厂方法相比于构造器，所返回对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值" class="headerlink" title="静态工厂方法相比于构造器，所返回对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值"></a>静态工厂方法相比于构造器，所返回对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值</h3><p>这个相对好理解一些。在静态工厂方法中，我们可以根据参数进行判断，根据参数不同返回不同的值，而构造方法则不行。其实从上一条也可以推出这条。</p><h3 id="静态工厂方法相比于构造器，方法返回对象所属的类，在编写包含该静态工厂方法的类时可以不存在"><a href="#静态工厂方法相比于构造器，方法返回对象所属的类，在编写包含该静态工厂方法的类时可以不存在" class="headerlink" title="静态工厂方法相比于构造器，方法返回对象所属的类，在编写包含该静态工厂方法的类时可以不存在"></a>静态工厂方法相比于构造器，方法返回对象所属的类，在编写包含该静态工厂方法的类时可以不存在</h3><p>这里引用一些别人的例子加上我自己的一些理解，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//四大组成之一：服务接口</span><br><span class="line">public interface LoginService &#123;//这是一个登录服务</span><br><span class="line">    public void login();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//四大组成之二：服务提供者接口</span><br><span class="line">public interface Provider &#123;//登录服务的提供者。通俗点说就是：通过这个newLoginService()可以获得一个服务。</span><br><span class="line">    public LoginService newLoginService();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 这是一个服务管理器，里面包含了四大组成中的三和四</span><br><span class="line"> * 解释：通过注册将 服务提供者 加入map，然后通过一个静态工厂方法 getService(String name) 返回不同的服务。</span><br><span class="line"> */</span><br><span class="line">public class ServiceManager &#123;</span><br><span class="line">    private static final Map&lt;String, Provider&gt; providers = new HashMap&lt;String, Provider&gt;();//map，保存了注册的服务</span><br><span class="line"> </span><br><span class="line">    private ServiceManager() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //四大组成之三：提供者注册API  (其实很简单，就是注册一下服务提供者)</span><br><span class="line">    public static void registerProvider(String name, Provider provider) &#123;</span><br><span class="line">        providers.put(name, provider);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //四大组成之四：服务访问API   (客户端只需要传递一个name参数，系统会去匹配服务提供者，然后提供服务)  (静态工厂方法)</span><br><span class="line">    public static LoginService getService(String name) &#123;</span><br><span class="line">        Provider provider = providers.get(name);</span><br><span class="line">        if (provider == null) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;No provider registered with name=&quot; + name);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        return provider.newLoginService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码的 <strong>ServiceManager类</strong> 的 <strong>getService()</strong> 方法返回的是 <strong>LoginService()</strong>, 在编写的时候，<strong>LoginService</strong>方法可以没有被初始化等操作，待运行阶段调用前进行初始化等操作即可。</p><h3 id="静态工厂方法相比于构造器的劣势"><a href="#静态工厂方法相比于构造器的劣势" class="headerlink" title="静态工厂方法相比于构造器的劣势"></a>静态工厂方法相比于构造器的劣势</h3><ol><li>静态工厂方法的主要缺点在于，类如果不含公有的或者受保护的构造器，就不能被子类化。</li><li>静态工厂方法的第二个缺点在于，程序员很难发现他们。</li></ol>]]></content:encoded>
      
      
      <category domain="http://hznu.asia/categories/Java/">Java</category>
      
      
      <category domain="http://hznu.asia/tags/Effective-Java/">Effective Java</category>
      
      
      <comments>http://hznu.asia/2022/01/13/Effective-Java-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于NotSingle项目的一些思考</title>
      <link>http://hznu.asia/2021/12/26/%E5%85%B3%E4%BA%8ENotSingle%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <guid>http://hznu.asia/2021/12/26/%E5%85%B3%E4%BA%8ENotSingle%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <pubDate>Sun, 26 Dec 2021 02:53:20 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;消息队列的选择&quot;&gt;&lt;a href=&quot;#消息队列的选择&quot; class=&quot;headerlink&quot; title=&quot;消息队列的选择&quot;&gt;&lt;/a&gt;消息队列的选择&lt;/h2&gt;&lt;p&gt;如今用的相对较多的消息队列有ActiveMQ、RabbitMQ、RocketMQ和Kafka这几种，</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="消息队列的选择"><a href="#消息队列的选择" class="headerlink" title="消息队列的选择"></a>消息队列的选择</h2><p>如今用的相对较多的消息队列有ActiveMQ、RabbitMQ、RocketMQ和Kafka这几种，因此该项目消息队列的选择也将从这几种来挑选。</p><p><img src="/2021/12/26/%E5%85%B3%E4%BA%8ENotSingle%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/image-20211226110632594.png" alt="image-20211226110632594"></p><p>对于ActiveMQ，由于其生态并不是很好，没经过大规模吞吐量场景的验证，社区也不是很活跃，因此<strong>不考虑采用</strong>；</p><p>对于RocketMQ，由于目前该产品主要针对的是在校学生，万人左右，虽然是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 <a href="https://github.com/apache/rocketmq">Apache</a>，但 GitHub 上的活跃度其实不算高），基础架构研发实力较强，用 RocketMQ 是很好的选择。但是目前而言，我并没有足够的技术去研究并应用他的底层，而且目前来看也并不需要这么大的吞吐量支持，<strong>不考虑采用</strong>；</p><p>对于KafKa，在大数据领域的实时计算、日志采集等场景使用较多，社区活跃，但是本系统并不涉及这些场景，目前来看也不需要这么大的吞吐量，<strong>不考虑采用</strong>；</p><p>对于RabbitMQ，是一款开源产品，拥有比较稳定的支持，活跃度也高，最主要是之前略有涉及，因此我<strong>选择RabbitMQ</strong>作为该项目消息队列。</p><blockquote><p><strong>本系统中，暂时不使用消息队列</strong>。后期考虑应用在动态发布方面</p></blockquote><h2 id="分布式还是单机"><a href="#分布式还是单机" class="headerlink" title="分布式还是单机"></a>分布式还是单机</h2><p>对于使用分布式还是单机系统，其实我也考虑了很久。</p><p><strong>单机系统</strong>的优点自然不必多少，简单快速开发，而且之前也一直是采用单机系统研发，因此可以快速开始项目的编写。</p><p>在考虑是否采用分布式微服务架构前，当然需要先了解为什么要采用微服务以及传统的单机系统的弊端了。</p><h4 id="什么是分布式"><a href="#什么是分布式" class="headerlink" title="什么是分布式"></a>什么是分布式</h4><p>在以往传统的企业系统架构中,我们针对一个复杂的业务需求通常使用对象或业务类型来构建一个单体项目。在项目中我们通常将需求分为三个主要部分:数据库、服务端处理、前端展现。</p><p>在业务发展初期,由于所有的业务逻辑在一个应用中,开发、测试、部署都还比较容易且方便。</p><p>但是,随着企业的发展,系统为了应对不同的业务需求会不断为该单体项目增加不同的业务模块;同时随着移动端设备的进步,前端展现模块已经不仅仅局限于Web的形式,这对于系统后端向前端的支持需要更多的接口模块。</p><p>单体应用由于面对的业务需求更为宽泛,不断扩大的需求会使得单体应用变得越来越臃肿。</p><p>单体应用的问题就逐渐凸显出来,由于单体系统部署在一个进程内,往往我们修改了一个很小的功能,为了部署上线会影响其他功能的运行。</p><p>并且,单体应用中的这些功能模块的使用场景、并发量、消耗的资源类型都各有不同,对于资源的利用又互相影响,这样使得我们对各个业务模块的系统容量很难给出较为准确的评估。</p><p>所以,单体系统在初期虽然可以非常方便地进行开发和使用,但是随着系统的发展,维护成本会变得越来越大,且难以控制。为了解决单体系统变得庞大臃肿之后产生的难以维护的问题,微服务架构诞生了并被大家所关注。</p><p>我们将系统中的不同功能模块拆分成多个不同的服务,这些服务都能够独立部署和扩展。由于每个服务都运行在自己的进程内,在部署上有稳固的边界,这样每个服务的更新都不会影响其他服务的运行。</p><p>同时,由于是独立部署的,我们可以更准确地为每个服务评估性能容量,通过配合服务间的协作流程也可以更容易地发现系统的瓶颈位置,以及给出较为准确的系统级性能容量评估。</p><blockquote><p><strong>但是，由于目前项目并不算太大，因此我将准备先做一版单机的，再在后期学习微服务架构，优化做一版微服务的。</strong></p></blockquote><blockquote><p>总体来说，目前我对该项目的思路如下：</p><ol><li>先构建用户端前端界面</li><li>采用单机系统构建后台，通信使用WebSocket，再搭配一些Redis场景，并逐步优化单机系统</li><li>构建管理后台前端界面，完善后端。初步做出一个可用的系统</li><li>采用分布式微服务框架构建后端，加入消息队列、netty等相关技术</li></ol><p>当然，在开发的过程中也可能适时调整，并不一定完全按照这个过程走。</p></blockquote><p><strong>参考引用：</strong></p><p>【1】 《Spring Cloud 微服务实战》翟永超</p><p>【2】 <a href="https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/why-mq.md">https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/why-mq.md</a></p>]]></content:encoded>
      
      
      <category domain="http://hznu.asia/categories/NotSingle/">NotSingle</category>
      
      
      <category domain="http://hznu.asia/tags/NotSingle/">NotSingle</category>
      
      
      <comments>http://hznu.asia/2021/12/26/%E5%85%B3%E4%BA%8ENotSingle%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>前后端分离模式下动态权限管理分析---以JeecgBoot为例</title>
      <link>http://hznu.asia/2021/12/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%86%E6%9E%90-%E4%BB%A5JeecgBoot%E4%B8%BA%E4%BE%8B/</link>
      <guid>http://hznu.asia/2021/12/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%86%E6%9E%90-%E4%BB%A5JeecgBoot%E4%B8%BA%E4%BE%8B/</guid>
      <pubDate>Fri, 10 Dec 2021 11:43:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;之前也写过关于前后端分离模式下动态权限管理相关的博客，但是由于之前对前后端知识了解尚且匮乏，因此在讲解时难免有讲的不够详细的地方，因此现在再以JeecgBoot项目（后面用 “本项目” 代替该词）中动态权限管理实现方式为例，重新详细讲解一遍。&lt;/p&gt;
&lt;blockquote</description>
        
      
      
      
      <content:encoded><![CDATA[<p>之前也写过关于前后端分离模式下动态权限管理相关的博客，但是由于之前对前后端知识了解尚且匮乏，因此在讲解时难免有讲的不够详细的地方，因此现在再以JeecgBoot项目（后面用 “本项目” 代替该词）中动态权限管理实现方式为例，重新详细讲解一遍。</p><blockquote><p>本例基于Vue2 + SpringBoot来讲解，对于我认为比较基础的知识不再赘述，只讲解实现的大致脉络，并且大部分讲解在代码注释部分，请仔细阅读。</p></blockquote><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><p>本项目最重要的方法位于<strong>src</strong>目录下的<strong>permission.js</strong>(注意与/store/modules下的区分)，精简代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line"> (...省略部分与该主题无关内容)</span><br><span class="line">      if (store.getters.permissionList.length === 0) &#123; // 判断vuex的store是否存储有权限列表，以此判断是否获取到（可能缓存了）</span><br><span class="line">        store.dispatch(&#x27;GetPermissionList&#x27;).then(res =&gt; &#123; </span><br><span class="line">              const menuData = res.result.menu;</span><br><span class="line">              if (menuData === null || menuData === &quot;&quot; || menuData === undefined) &#123;</span><br><span class="line">                return;</span><br><span class="line">              &#125;</span><br><span class="line">              let constRoutes = [];</span><br><span class="line">              constRoutes = generateIndexRouter(menuData); // 代码如下文所示</span><br><span class="line">              // 添加主界面路由</span><br><span class="line">              store.dispatch(&#x27;UpdateAppRouter&#x27;,  &#123; constRoutes &#125;).then(() =&gt; &#123; // 代码如下文所示</span><br><span class="line">                // 根据roles权限生成可访问的路由表</span><br><span class="line">                // 动态添加可访问路由表</span><br><span class="line">                router.addRoutes(store.getters.addRouters)</span><br><span class="line">                const redirect = decodeURIComponent(from.query.redirect || to.path)</span><br><span class="line">                if (to.path === redirect) &#123;</span><br><span class="line">                  // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span><br><span class="line">                  next(&#123; ...to, replace: true &#125;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                  // 跳转到目的路由</span><br><span class="line">                  next(&#123; path: redirect &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          .catch(() =&gt; &#123;</span><br><span class="line">           /* notification.error(&#123;</span><br><span class="line">              message: &#x27;系统提示&#x27;,</span><br><span class="line">              description: &#x27;请求用户信息失败，请重试！&#x27;</span><br><span class="line">            &#125;)*/</span><br><span class="line">            store.dispatch(&#x27;Logout&#x27;).then(() =&gt; &#123;</span><br><span class="line">              next(&#123; path: &#x27;/user/login&#x27;, query: &#123; redirect: to.fullPath &#125; &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我认为优秀的代码就是最好的注释，你能根据命名猜测出这段代码的大致意思，所以对于如上代码，我只写了大致的注释。但是有一段代码需要提醒大家。对于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#x27;GetPermissionList&#x27;).then(...)</span><br></pre></td></tr></table></figure><p>有必要仔细阅读<a href="https://vuex.vuejs.org/zh/guide/actions.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E5%88%86%E5%8F%91-action">vuex参考文档</a></p><p>此外，对于上述中如下代码，需要进一步解释。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#x27;GetPermissionList&#x27;).then(...)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constRoutes = generateIndexRouter(menuData);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#x27;UpdateAppRouter&#x27;,  &#123; constRoutes &#125;).then(...)</span><br></pre></td></tr></table></figure><blockquote><p> <strong>store.dispatch(‘GetPermissionList’).then(…)</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GetPermissionList(&#123; commit &#125;) &#123;</span><br><span class="line">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        queryPermissionsByUser().then(response =&gt; &#123; // 后台查询用户权限信息</span><br><span class="line">          const menuData = response.result.menu; </span><br><span class="line">          const authData = response.result.auth;</span><br><span class="line">          const allAuthData = response.result.allAuth;</span><br><span class="line">          sessionStorage.setItem(USER_AUTH,JSON.stringify(authData));</span><br><span class="line">          sessionStorage.setItem(SYS_BUTTON_AUTH,JSON.stringify(allAuthData));</span><br><span class="line">          if (menuData &amp;&amp; menuData.length &gt; 0) &#123;</span><br><span class="line">            commit(&#x27;SET_PERMISSIONLIST&#x27;, menuData)</span><br><span class="line">            // 设置系统安全模式</span><br><span class="line">            commit(&#x27;SET_SYS_SAFE_MODE&#x27;, response.result.sysSafeMode)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            reject(&#x27;getPermissionList: permissions must be a non-null array !&#x27;)</span><br><span class="line">          &#125;</span><br><span class="line">          resolve(response)</span><br><span class="line">        &#125;).catch(error =&gt; &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中，上述返回的<strong>response结构</strong>如下所示（节选部分内容）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;success&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;allAuth&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;online:goGenerateCode&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;代码生成按钮&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;user:add&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;添加按钮&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;user:edit&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;用户编辑&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;user:sex&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;表单性别可见&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;user:form:birthday&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;禁用生日字段&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;demo:add&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;demo添加功能&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;user:form:phone&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;手机号禁用&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;auth&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;demo:add&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;demo添加功能&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;online:goGenerateCode&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;代码生成按钮&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;action&quot;</span>:<span class="string">&quot;user:add&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;describe&quot;</span>:<span class="string">&quot;添加按钮&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;menu&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;redirect&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/dashboard/analysis&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;dashboard/Analysis&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;icon&quot;</span>:<span class="string">&quot;home&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;Analysis&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;首页&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;dashboard-analysis&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;9502685863ab87f0ad1134142788a385&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;redirect&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/report&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;layouts/RouteView&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/report/ArchivesStatisticst&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;jeecg/report/ArchivesStatisticst&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;ArchivesStatisticst&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;布局统计报表&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;report-ArchivesStatisticst&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;2aeddae571695cd6380f6d6d334d6e7d&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/report/ViserChartDemo&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;jeecg/report/ViserChartDemo&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;ViserChartDemo&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;ViserChartDemo&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;report-ViserChartDemo&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;020b06793e4de2eee0007f603000c769&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/online/cgreport/6c7f59741c814347905a938f06ee003c&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;modules/online/cgreport/auto/OnlCgreportAutoList&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;OnlCgreportAutoList&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;Online报表示例&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;online-cgreport-6c7f59741c814347905a938f06ee003c&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1232123780958064642&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;a93c0c3609dece99e85f4aa1caaac981&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;layouts/IframePageView&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">                            <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;IframePageView&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;Redis监控&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;&#123;&#123; window._CONFIG[&#x27;domianURL&#x27;] &#125;&#125;/jmreport/view/1352160857479581696?token=$&#123;token&#125;&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;&#123;&#123; window._CONFIG[&#x27;domianURL&#x27;] &#125;&#125;-jmreport-view-1352160857479581696?token=$&#123;token&#125;&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1352200630711652354&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;icon&quot;</span>:<span class="string">&quot;bar-chart&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;RouteView&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;统计报表&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;report&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;f0675b52d89100ee88472b6800754a08&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;redirect&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/form&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;layouts/PageView&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;children&quot;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/form/step-form&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;examples/form/stepForm/StepForm&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;StepForm&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;分步表单&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;form-step-form&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;6531cf3421b1265aeeeabaab5e176e6d&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;path&quot;</span>:<span class="string">&quot;/form/advanced-form&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;component&quot;</span>:<span class="string">&quot;examples/form/advancedForm/AdvancedForm&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;route&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                            <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                            <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;AdvancedForm&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;高级表单&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;form-advanced-form&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;e5973686ed495c379d829ea8b2881fc6&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;meta&quot;</span>:&#123;</span><br><span class="line">                    <span class="attr">&quot;keepAlive&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;internalOrExternal&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">&quot;icon&quot;</span>:<span class="string">&quot;form&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;componentName&quot;</span>:<span class="string">&quot;PageView&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;表单页&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;form&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;e3c13679c73a4f829bcff2aba8fd68b1&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;sysSafeMode&quot;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>:<span class="number">1639477587569</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述数据结构相关说明</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">`&#123; Route &#125;` 对象</span><br><span class="line"></span><br><span class="line">| 参数     | 说明                                        | 类型    | 默认值 |</span><br><span class="line">| -------- | ----------------------------------------- -- ------- | ------ |</span><br><span class="line">| hidden   | 控制路由是否显示在 sidebar                    | boolean | falase |</span><br><span class="line">| redirect | 重定向地址, 访问这个路由时,自定进行重定向         | string  | -      |</span><br><span class="line">| name     | 路由名称, 建议设置,且不能重名                   | string  | -      |</span><br><span class="line">| meta     | 路由元信息（路由附带扩展信息）                   | object  | &#123;&#125;     |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`&#123; Meta &#125;` 路由元信息对象</span><br><span class="line"> </span><br><span class="line">| 参数                | 说明                                                                     | 类型    | 默认值 |</span><br><span class="line">| ------------------- |------------------------------------------------------------------------  ------- ------ |</span><br><span class="line">| title               | 路由标题, 用于显示面包屑, 页面标题 *推荐设置                                   | string  | -      |</span><br><span class="line">| icon                | 路由在 menu 上显示的图标                                                   | string  | -      |</span><br><span class="line">| keepAlive           | 缓存该路由                                                                | boolean | false  |</span><br><span class="line">| hiddenHeaderContent | *特殊 隐藏 [PageHeader]( 组件中的页面带的 面包屑和页面标题栏 )        | boolean | false  |</span><br><span class="line">| permission          | 与项目提供的权限拦截匹配的权限，如果不匹配，则会被禁止访问该路由页面                 | array   | []     |</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>generateIndexRouter(menuData)：</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 生成首页路由</span><br><span class="line">export function generateIndexRouter(data) &#123; // 此处data参数即 menuData</span><br><span class="line">let indexRouter = [&#123;</span><br><span class="line">          path: &#x27;/&#x27;,</span><br><span class="line">          name: &#x27;dashboard&#x27;,</span><br><span class="line">          component: resolve =&gt; require([&#x27;@/components/layouts/TabLayout&#x27;], resolve),</span><br><span class="line">          meta: &#123; title: &#x27;首页&#x27; &#125;,</span><br><span class="line">          redirect: &#x27;/dashboard/analysis&#x27;,</span><br><span class="line">          children: [</span><br><span class="line">            ...generateChildRouters(data) // 代码如下文所示</span><br><span class="line">          ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          &quot;path&quot;: &quot;*&quot;, &quot;redirect&quot;: &quot;/404&quot;, &quot;hidden&quot;: true</span><br><span class="line">        &#125;]</span><br><span class="line">  return indexRouter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 而上述对应的**generateChildRouters(data)**方法如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// 生成嵌套路由（子路由）</span><br><span class="line">function generateChildRouters (data) &#123;</span><br><span class="line">  const routers = [];</span><br><span class="line">  for (let item of data) &#123;</span><br><span class="line">    let component = &quot;&quot;;</span><br><span class="line">    if(item.component.indexOf(&quot;layouts&quot;)&gt;=0)&#123; // 其实这里代码就做了一件事，将权限菜单的component进行拼接，得到文件夹的正确路径，不过为啥不一开始在路由表就存好正确的路径暂时没想通，项目较大，应该是迭代或者有其他我没注意到的地方的考虑</span><br><span class="line">       component = &quot;components/&quot;+item.component;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       component = &quot;views/&quot;+item.component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // eslint-disable-next-line</span><br><span class="line">    let URL = (item.meta.url|| &#x27;&#x27;).replace(/&#123;&#123;([^&#125;&#125;]+)?&#125;&#125;/g, (s1, s2) =&gt; eval(s2)) // URL支持&#123;&#123; window.xxx &#125;&#125;占位符变量</span><br><span class="line">    if (isURL(URL)) &#123;</span><br><span class="line">      item.meta.url = URL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let componentPath</span><br><span class="line">    if(item.component==&quot;modules/online/cgform/OnlCgformHeadList&quot;)&#123;</span><br><span class="line">      componentPath = onlineCommons.OnlCgformHeadList</span><br><span class="line">    &#125;else if(item.component==&quot;modules/online/cgform/OnlCgformCopyList&quot;)&#123;</span><br><span class="line">      componentPath = onlineCommons.OnlCgformCopyList</span><br><span class="line">    &#125;  //(...省略部分与该主题无关的else if，上面的else if其实也无关，主要是最后else中的 `component` )</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      componentPath = resolve =&gt; require([&#x27;@/&#x27; + component+&#x27;.vue&#x27;], resolve)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let menu =  &#123;</span><br><span class="line">      path: item.path,</span><br><span class="line">      name: item.name,</span><br><span class="line">      redirect:item.redirect,</span><br><span class="line">      component: componentPath,</span><br><span class="line">      hidden:item.hidden,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title:item.meta.title ,</span><br><span class="line">        icon: item.meta.icon,</span><br><span class="line">        url:item.meta.url ,</span><br><span class="line">        permissionList:item.meta.permissionList,</span><br><span class="line">        keepAlive:item.meta.keepAlive,</span><br><span class="line">        internalOrExternal:item.meta.internalOrExternal,</span><br><span class="line">        componentName:item.meta.componentName</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(item.alwaysShow)&#123;</span><br><span class="line">      menu.alwaysShow = true;</span><br><span class="line">      menu.redirect = menu.path;</span><br><span class="line">    &#125;</span><br><span class="line">    if (item.children &amp;&amp; item.children.length &gt; 0) &#123;</span><br><span class="line">      menu.children = [...generateChildRouters( item.children)];</span><br><span class="line">    &#125;</span><br><span class="line">    //根据后台菜单配置，判断是否路由菜单字段，动态选择是否生成路由（为了支持参数URL菜单）</span><br><span class="line">    //判断是否生成路由</span><br><span class="line">    if(item.route &amp;&amp; item.route === &#x27;0&#x27;)&#123;</span><br><span class="line">      //console.log(&#x27; 不生成路由 item.route：  &#x27;+item.route);</span><br><span class="line">      //console.log(&#x27; 不生成路由 item.path：  &#x27;+item.path);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      routers.push(menu);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return routers</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>store.dispatch(‘UpdateAppRouter’,  { constRoutes }).then()</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 动态添加主界面路由，需要缓存</span><br><span class="line">    UpdateAppRouter(&#123; commit &#125;, routes) &#123; // 传入的routes为  generateIndexRouter(menuData) 的返回值，见上述该方法的代码</span><br><span class="line">      return new Promise(resolve =&gt; &#123;</span><br><span class="line">        let routelist = routes.constRoutes;</span><br><span class="line">        commit(&#x27;SET_ROUTERS&#x27;, routelist)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h2><blockquote><p>后端部分我个人认为最重要的地方是数据库表的设计，而相关的业务代码其实没什么好讲的，但是还是贴一下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户拥有的菜单权限和按钮权限</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getUserPermissionByToken&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; getUserPermissionByToken() &#123;</span><br><span class="line">Result&lt;JSONObject&gt; result = <span class="keyword">new</span> Result&lt;JSONObject&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//直接获取当前用户不适用前端token</span></span><br><span class="line">LoginUser loginUser = (LoginUser) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line"><span class="keyword">if</span> (oConvertUtils.isEmpty(loginUser)) &#123;</span><br><span class="line"><span class="keyword">return</span> Result.error(<span class="string">&quot;请登录系统！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;SysPermission&gt; metaList = sysPermissionService.queryByUser(loginUser.getUsername());</span><br><span class="line"><span class="comment">//添加首页路由</span></span><br><span class="line"><span class="comment">//需要根据后台的路由配置来实现是否缓存</span></span><br><span class="line"><span class="keyword">if</span>(!PermissionDataUtil.hasIndexPage(metaList))&#123;</span><br><span class="line">SysPermission indexMenu = sysPermissionService.list(<span class="keyword">new</span> LambdaQueryWrapper&lt;SysPermission&gt;().eq(SysPermission::getName,<span class="string">&quot;首页&quot;</span>)).get(<span class="number">0</span>);</span><br><span class="line">metaList.add(<span class="number">0</span>,indexMenu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; roles = sysUserService.getRole(loginUser.getUsername());</span><br><span class="line">            String compUrl = RoleIndexConfigEnum.getIndexByRoles(roles);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isNotBlank(compUrl))&#123;</span><br><span class="line">List&lt;SysPermission&gt; menus = metaList.stream().filter(sysPermission -&gt; <span class="string">&quot;首页&quot;</span>.equals(sysPermission.getName())).collect(Collectors.toList());</span><br><span class="line">menus.get(<span class="number">0</span>).setComponent(compUrl);</span><br><span class="line">&#125;</span><br><span class="line">JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">JSONArray menujsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line"><span class="keyword">this</span>.getPermissionJsonArray(menujsonArray, metaList, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//一级菜单下的子菜单全部是隐藏路由，则一级菜单不显示</span></span><br><span class="line"><span class="keyword">this</span>.handleFirstLevelMenuHidden(menujsonArray);</span><br><span class="line"></span><br><span class="line">JSONArray authjsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line"><span class="keyword">this</span>.getAuthJsonArray(authjsonArray, metaList);</span><br><span class="line"><span class="comment">//查询所有的权限</span></span><br><span class="line">LambdaQueryWrapper&lt;SysPermission&gt; query = <span class="keyword">new</span> LambdaQueryWrapper&lt;SysPermission&gt;();</span><br><span class="line">query.eq(SysPermission::getDelFlag, CommonConstant.DEL_FLAG_0);</span><br><span class="line">query.eq(SysPermission::getMenuType, CommonConstant.MENU_TYPE_2);</span><br><span class="line"><span class="comment">//query.eq(SysPermission::getStatus, &quot;1&quot;);</span></span><br><span class="line">List&lt;SysPermission&gt; allAuthList = sysPermissionService.list(query);</span><br><span class="line">JSONArray allauthjsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line"><span class="keyword">this</span>.getAllAuthJsonArray(allauthjsonArray, allAuthList);</span><br><span class="line"><span class="comment">//路由菜单</span></span><br><span class="line">json.put(<span class="string">&quot;menu&quot;</span>, menujsonArray);</span><br><span class="line"><span class="comment">//按钮权限（用户拥有的权限集合）</span></span><br><span class="line">json.put(<span class="string">&quot;auth&quot;</span>, authjsonArray);</span><br><span class="line"><span class="comment">//全部权限配置集合（按钮权限，访问权限）</span></span><br><span class="line">json.put(<span class="string">&quot;allAuth&quot;</span>, allauthjsonArray);</span><br><span class="line">json.put(<span class="string">&quot;sysSafeMode&quot;</span>, jeeccgBaseConfig.getSafeMode());</span><br><span class="line">result.setResult(json);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">result.error500(<span class="string">&quot;查询失败:&quot;</span> + e.getMessage());  </span><br><span class="line">log.error(e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取几个业务相关（其实就是数据库查询）相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SysPermission&gt; metaList = sysPermissionService.queryByUser(loginUser.getUsername());</span><br><span class="line"></span><br><span class="line">SysPermission indexMenu = sysPermissionService.list(<span class="keyword">new</span> LambdaQueryWrapper&lt;SysPermission&gt;().eq(SysPermission::getName,<span class="string">&quot;首页&quot;</span>)).get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; roles = sysUserService.getRole(loginUser.getUsername());</span><br></pre></td></tr></table></figure><h4 id="相关数据库表设计如下"><a href="#相关数据库表设计如下" class="headerlink" title="相关数据库表设计如下"></a>相关数据库表设计如下</h4><blockquote><p>角色和权限相关，那么有权限表必然也有对应的角色表，因此我们关注的重点方向在于权限表、角色表 以及 权限角色关联表。</p></blockquote><blockquote><p><strong>sys_role表</strong></p></blockquote><p><img src="/2021/12/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%86%E6%9E%90-%E4%BB%A5JeecgBoot%E4%B8%BA%E4%BE%8B/image-20211214212015880.png"></p><blockquote><p><strong>sys_role_permission表（节选）</strong></p></blockquote><p><img src="/2021/12/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%86%E6%9E%90-%E4%BB%A5JeecgBoot%E4%B8%BA%E4%BE%8B/image-20211214212110982.png" alt="image-20211214212110982"></p><blockquote><p><strong>sys_permission表</strong>(如需看更多数据自行下载代码查看)</p></blockquote><p><img src="/2021/12/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%86%E6%9E%90-%E4%BB%A5JeecgBoot%E4%B8%BA%E4%BE%8B/image-20211214212252390.png" alt="image-20211214212252390"></p><p><img src="/2021/12/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%86%E6%9E%90-%E4%BB%A5JeecgBoot%E4%B8%BA%E4%BE%8B/image-20211214213445059.png" alt="image-20211214213445059"></p><blockquote><p>后端sql如下,总之，查询出来的数据就是上面介绍的json数据</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 获取登录用户拥有的权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Object&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;SysPermission&quot;</span>&gt;</span></span><br><span class="line">   SELECT * FROM (</span><br><span class="line">   SELECT p.*</span><br><span class="line">   FROM  sys_permission p</span><br><span class="line">   WHERE (exists(</span><br><span class="line">select a.id from sys_role_permission a</span><br><span class="line">join sys_role b on a.role_id = b.id</span><br><span class="line">join sys_user_role c on c.role_id = b.id</span><br><span class="line">join sys_user d on d.id = c.user_id</span><br><span class="line">where p.id = a.permission_id AND d.username = #&#123;username,jdbcType=VARCHAR&#125;</span><br><span class="line">)</span><br><span class="line">or (p.url like &#x27;%:code&#x27; and p.url like &#x27;/online%&#x27; and p.hidden = 1)</span><br><span class="line">or p.url = &#x27;/online&#x27;)</span><br><span class="line">   and p.del_flag = 0</span><br><span class="line"><span class="comment">&lt;!--update begin Author:lvdandan  Date:20200213 for：加入部门权限 --&gt;</span></span><br><span class="line">   UNION</span><br><span class="line">   SELECT p.*</span><br><span class="line">   FROM  sys_permission p</span><br><span class="line">   WHERE exists(</span><br><span class="line">select a.id from sys_depart_role_permission a</span><br><span class="line">join sys_depart_role b on a.role_id = b.id</span><br><span class="line">join sys_depart_role_user c on c.drole_id = b.id</span><br><span class="line">join sys_user d on d.id = c.user_id</span><br><span class="line">where p.id = a.permission_id AND d.username = #&#123;username,jdbcType=VARCHAR&#125;</span><br><span class="line">   )</span><br><span class="line">   and p.del_flag = 0</span><br><span class="line"><span class="comment">&lt;!--update end Author:lvdandan  Date:20200213 for：加入部门权限 --&gt;</span></span><br><span class="line">   ) h order by h.sort_no ASC</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本思路为：数据库存储菜单结构、页面权限控制信息等，前端根据数据库中的菜单结构和权限信息来渲染一个菜单出来并只显示其有权限的菜单，并在路由守卫中进行权限控制防止手动输入path越权打开页面</p><p>1、前端路由（vue-router）中需要正常创建页面及路由。</p><p>2、数据库存储菜单结构和页面权限信息，需要时从数据库中查询出来</p><ul><li>所有角色都有的界面（比如dashboard）写死在前端</li><li>由权限控制得到的视图路径存在数据库中</li><li>菜单和页面组成上下级关系，一级可以是菜单也可以是内容页，内容页也可以放在菜单下，不可见的内容页也可以放在一个普通内容页下，这样理论（需要页面菜单样式支持）可以组成无限级菜单</li><li>菜单和页面的基本属性见上文 json数据 下面的说明</li><li>不需要控制权限且不需要显示到左侧菜单的路由这里可以不进行管理，比如404页面等</li></ul><p>3、前端打开后获取数据库的所有菜单、页面及结构，根据是否登录、是否需要验证权限等进行控制，或无权限跳转至登录页</p><p>4、用户登录成功后，再获取用户对应的的页面权限列表，使用上一步获得的所有页面、结构和用户拥有权限的列表渲染出一个菜单，只包含此用户拥有权限的相应视图</p><p>5、路由守卫中根据上一步获得的权限列表判断每个跳转，无权限可返回404或无权限页面，防止用户手动输入path越权访问</p>]]></content:encoded>
      
      
      <category domain="http://hznu.asia/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/">前后端分离</category>
      
      
      <category domain="http://hznu.asia/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="http://hznu.asia/tags/Vue/">Vue</category>
      
      
      <comments>http://hznu.asia/2021/12/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%86%E6%9E%90-%E4%BB%A5JeecgBoot%E4%B8%BA%E4%BE%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我的第一篇Blog</title>
      <link>http://hznu.asia/2021/12/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87Blog/</link>
      <guid>http://hznu.asia/2021/12/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87Blog/</guid>
      <pubDate>Tue, 07 Dec 2021 08:26:08 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;刚刚从剧社排练完已经22：10了，由于今天下午刚刚把博客搭起来，还是回实验室写下了自己的第一篇博客。&lt;/p&gt;
&lt;p&gt;写写删删，也不知道从哪开始写起了。说起来最近还是挺忙的，准确说应该是自己给自己制造的忙碌吧。&lt;/p&gt;
&lt;p&gt;简单来说，搭建这篇博客的目的，简单来说，就是希望记</description>
        
      
      
      
      <content:encoded><![CDATA[<p>刚刚从剧社排练完已经22：10了，由于今天下午刚刚把博客搭起来，还是回实验室写下了自己的第一篇博客。</p><p>写写删删，也不知道从哪开始写起了。说起来最近还是挺忙的，准确说应该是自己给自己制造的忙碌吧。</p><p>简单来说，搭建这篇博客的目的，简单来说，就是希望记录自己的学习过程吧。</p><p>其实在之前也经常在CSDN写过一些博客了，好吧，最近一年基本没写了，原因也是多种多样的。但是最近看了一些书还是深深感受到拥有一个个人博客并且坚持写下去的重要性，<strong>所以也在这里立下一个小小的flag，每周至少坚持总结输出一篇blog！</strong></p><p>之前在CSDN写的文章可能和这个网站本身上面很多的文章一样，东抄一点，西抄一点，质量堪忧，并且并没有很大的价值。</p><p>现在回头来看，从前自己在上面写博客，是为了写而写，并不是真正遇到问题，并且做过详细的了解，而自发的想去总结并且记录它。</p><p>可能有人也会想，我立下的flag不也是一周输出一篇，同样是为了写去写啊。但是我觉得，在研究生期间自己还是有许多时间去学习很多东西，在这个过程中，必然会遇到许许多多的问题，所以一周至少一篇记录总结还是非常合理的！</p><p>在我写博客的过程中，也许会存在许多问题，比如写的不够清楚，或者是我本身技术方面存在不足而导致讲错的地方，这些都是很正常的，我也会坦然接受，毕竟，我现在真的很菜。<strong>但是，也希望你能友善探讨。</strong></p><p>总而言之，尽管我写作的过程中会存在许多不足，我还是会坚持把能做到最好的样子呈现在大家面前。</p><p><strong>“如果我认为我写的博客不比目前我能发现的大多数文章要好，那我就没有必要去写它！”</strong></p><p>这会成为我写作的原则。至于为什么不说是能像很多作者口中的 “比其他所有文章要好”，那是因为我深知自己的水平远远达不到，也正是因为这样，我才决定开始搭建自己的私人博客了，否则，我就直接去出书啦！</p><p><strong>希望我的博客，能对你有所帮助！</strong></p>]]></content:encoded>
      
      
      <category domain="http://hznu.asia/categories/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      
      
      <comments>http://hznu.asia/2021/12/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87Blog/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
